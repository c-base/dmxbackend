{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dmx-frontend/tests/app.lint-test.js","dmx-frontend/tests/integration/components/c-base-map-light-element/component-test.js","dmx-frontend/tests/integration/components/c-base-map-light/component-test.js","dmx-frontend/tests/integration/components/c-base-map-multi-light-element/component-test.js","dmx-frontend/tests/integration/components/c-base-map/component-test.js","dmx-frontend/tests/integration/components/color-picker/component-test.js","dmx-frontend/tests/integration/components/magic-pi/component-test.js","dmx-frontend/tests/test-helper.js","dmx-frontend/tests/tests.lint-test.js","dmx-frontend/tests/unit/adapters/application-test.js","dmx-frontend/tests/unit/adapters/color-test.js","dmx-frontend/tests/unit/adapters/light-info-test.js","dmx-frontend/tests/unit/adapters/preset-channel-test.js","dmx-frontend/tests/unit/adapters/preset-test.js","dmx-frontend/tests/unit/helpers/build-css-test.js","dmx-frontend/tests/unit/light-status/controller-test.js","dmx-frontend/tests/unit/light-status/route-test.js","dmx-frontend/tests/unit/models/color-test.js","dmx-frontend/tests/unit/models/light-channel-test.js","dmx-frontend/tests/unit/models/light-element-test.js","dmx-frontend/tests/unit/models/light-info-test.js","dmx-frontend/tests/unit/models/light-presets-test.js","dmx-frontend/tests/unit/models/light-status-test.js","dmx-frontend/tests/unit/models/preset-channel-test.js","dmx-frontend/tests/unit/models/preset-test.js","dmx-frontend/tests/unit/serializers/application-test.js","dmx-frontend/tests/unit/serializers/color-test.js","dmx-frontend/tests/unit/serializers/light-info-test.js","dmx-frontend/tests/unit/serializers/preset-channel-test.js","dmx-frontend/tests/unit/serializers/preset-test.js","dmx-frontend/tests/unit/services/magic-test.js","dmx-frontend/tests/unit/services/state-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dmx-frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/color.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/color.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/light-channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/light-channel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/light-fixture.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/light-fixture.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/preset-channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/preset-channel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/preset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/preset.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/c-base-map-light-element/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/c-base-map-light-element/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/c-base-map-light/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/c-base-map-light/component.js should pass ESLint\\n\\n8:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n10:10 - Use brace expansion (ember/use-brace-expansion)');\n  });\n\n  QUnit.test('components/c-base-map-multi-light-element/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/c-base-map-multi-light-element/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/c-base-map/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/c-base-map/component.js should pass ESLint\\n\\n1:10 - \\'all\\' is defined but never used. (no-unused-vars)\\n3:10 - \\'set\\' is defined but never used. (no-unused-vars)\\n4:10 - \\'task\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/color-picker/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/color-picker/component.js should pass ESLint\\n\\n3:10 - \\'set\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/magic-pi/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/magic-pi/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/build-css.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/build-css.js should pass ESLint\\n\\n5:31 - Unnecessary escape character: \\\\d. (no-useless-escape)');\n  });\n\n  QUnit.test('light-fixtures/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'light-fixtures/controller.js should pass ESLint\\n\\n8:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)');\n  });\n\n  QUnit.test('light-fixtures/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'light-fixtures/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/color.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/color.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/light-channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/light-channel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/light-element.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/light-element.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/light-fixture.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/light-fixture.js should pass ESLint\\n\\n1:10 - \\'get\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('models/light-presets.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/light-presets.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/light-status.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/light-status.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/preset-channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/preset-channel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/preset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/preset.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/color.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/color.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/light-channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/light-channel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/light-fixture.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/light-fixture.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/preset-channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/preset-channel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/preset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/preset.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/magic.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/magic.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/state.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/state.js should pass ESLint\\n\\n12:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n40:9 - Unexpected console statement. (no-console)\\n46:7 - Unexpected console statement. (no-console)\\n64:5 - Unexpected console statement. (no-console)');\n  });\n});","define('dmx-frontend/tests/integration/components/c-base-map-light-element/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('c-base-map-light-element', 'Integration | Component | c base map light element', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lrk9ecjI\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"c-base-map-light-element\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"AEL3N982\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"c-base-map-light-element\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dmx-frontend/tests/integration/components/c-base-map-light/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('c-base-map-light', 'Integration | Component | c base map light', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tYte8K/M\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"c-base-map-light\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Zg1+vXKQ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"c-base-map-light\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dmx-frontend/tests/integration/components/c-base-map-multi-light-element/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('c-base-map-multi-light-element', 'Integration | Component | c base map multi light element', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UDi0m+dR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"c-base-map-multi-light-element\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8TGpRDU3\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"c-base-map-multi-light-element\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dmx-frontend/tests/integration/components/c-base-map/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('c-base-map', 'Integration | Component | c base map', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BzY68JUq\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"c-base-map\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lZaffw9d\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"c-base-map\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dmx-frontend/tests/integration/components/color-picker/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('color-picker', 'Integration | Component | color picker', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UBQ9gJuc\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"color-picker\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"C98HLpzu\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"color-picker\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dmx-frontend/tests/integration/components/magic-pi/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('magic-pi', 'Integration | Component | magic pi', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"iRZA6l2P\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"magic-pi\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IG+u9hy8\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"magic-pi\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dmx-frontend/tests/test-helper', ['dmx-frontend/app', 'dmx-frontend/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('dmx-frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/c-base-map-light-element/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/c-base-map-light-element/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/c-base-map-light/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/c-base-map-light/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/c-base-map-multi-light-element/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/c-base-map-multi-light-element/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/c-base-map/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/c-base-map/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/color-picker/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/color-picker/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/magic-pi/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/magic-pi/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/color-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/color-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/light-info-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/light-info-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/preset-channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/preset-channel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/preset-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/preset-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/build-css-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/build-css-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/light-status/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/light-status/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/light-status/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/light-status/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/color-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/color-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/light-channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/light-channel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/light-element-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/light-element-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/light-info-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/light-info-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/light-presets-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/light-presets-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/light-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/light-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/preset-channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/preset-channel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/preset-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/preset-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/color-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/color-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/light-info-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/light-info-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/preset-channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/preset-channel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/preset-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/preset-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/magic-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/magic-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/state-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/state-test.js should pass ESLint\\n\\n');\n  });\n});","define('dmx-frontend/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('dmx-frontend/tests/unit/adapters/color-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:color', 'Unit | Adapter | color', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('dmx-frontend/tests/unit/adapters/light-info-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:light-info', 'Unit | Adapter | light info', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('dmx-frontend/tests/unit/adapters/preset-channel-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | preset channel', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:preset-channel');\n      assert.ok(adapter);\n    });\n  });\n});","define('dmx-frontend/tests/unit/adapters/preset-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | preset', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:preset');\n      assert.ok(adapter);\n    });\n  });\n});","define('dmx-frontend/tests/unit/helpers/build-css-test', ['dmx-frontend/helpers/build-css', 'qunit'], function (_buildCss, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | build css');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    let result = (0, _buildCss.buildCss)([42]);\n    assert.ok(result);\n  });\n});","define('dmx-frontend/tests/unit/light-status/controller-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:light-status', 'Unit | Controller | light status', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dmx-frontend/tests/unit/light-status/route-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:light-status', 'Unit | Route | light status', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let route = this.subject();\n    assert.ok(route);\n  });\n});","define('dmx-frontend/tests/unit/models/color-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('color', 'Unit | Model | color', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dmx-frontend/tests/unit/models/light-channel-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('light-channel', 'Unit | Model | light channel', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dmx-frontend/tests/unit/models/light-element-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('light-element', 'Unit | Model | light element', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dmx-frontend/tests/unit/models/light-info-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('light-info', 'Unit | Model | light info', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dmx-frontend/tests/unit/models/light-presets-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('light-presets', 'Unit | Model | light presets', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dmx-frontend/tests/unit/models/light-status-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('light-status', 'Unit | Model | light status', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dmx-frontend/tests/unit/models/preset-channel-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | preset channel', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('preset-channel', {});\n      assert.ok(model);\n    });\n  });\n});","define('dmx-frontend/tests/unit/models/preset-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | preset', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('preset', {});\n      assert.ok(model);\n    });\n  });\n});","define('dmx-frontend/tests/unit/serializers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    let record = this.subject();\n\n    let serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dmx-frontend/tests/unit/serializers/color-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('color', 'Unit | Serializer | color', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:color']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    let record = this.subject();\n\n    let serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dmx-frontend/tests/unit/serializers/light-info-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('light-info', 'Unit | Serializer | light info', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:light-info']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    let record = this.subject();\n\n    let serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dmx-frontend/tests/unit/serializers/preset-channel-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | preset channel', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('preset-channel');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = store.createRecord('preset-channel', {});\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('dmx-frontend/tests/unit/serializers/preset-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | preset', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('preset');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = store.createRecord('preset', {});\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('dmx-frontend/tests/unit/services/magic-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:magic', 'Unit | Service | magic', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let service = this.subject();\n    assert.ok(service);\n  });\n});","define('dmx-frontend/tests/unit/services/state-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:state', 'Unit | Service | state', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    let service = this.subject();\n    assert.ok(service);\n  });\n});","define('dmx-frontend/config/environment', [], function() {\n  var prefix = 'dmx-frontend';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('dmx-frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingszJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}